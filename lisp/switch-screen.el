
(setq switch-screen-vector (make-bool-vector 10 nil))
(setq switch-screen-current-screen 1)

(defun switch-to-screen (num)
  (interactive "number")
  (message (concat "switching to screen" (number-to-string num)))
  (when (and (<= 0 num)
             (< num 10))
    (window-configuration-to-register switch-screen-current-screen)
    (if (aref switch-screen-vector num)
        (jump-to-register num)
      (aset switch-screen-vector num t))
    (setq switch-screen-current-screen num)))

(global-unset-key (kbd "C-u"))
(global-set-key (kbd "C-u 1") (lambda () (interactive) (switch-to-screen 1)))
(global-set-key (kbd "C-u 2") (lambda () (interactive) (switch-to-screen 2)))
(global-set-key (kbd "C-u 3") (lambda () (interactive) (switch-to-screen 3)))
(global-set-key (kbd "C-u 4") (lambda () (interactive) (switch-to-screen 4)))
(global-set-key (kbd "C-u 5") (lambda () (interactive) (switch-to-screen 5)))
(global-set-key (kbd "C-u 6") (lambda () (interactive) (switch-to-screen 6)))
(global-set-key (kbd "C-u 7") (lambda () (interactive) (switch-to-screen 7)))
(global-set-key (kbd "C-u 8") (lambda () (interactive) (switch-to-screen 8)))
(global-set-key (kbd "C-u 9") (lambda () (interactive) (switch-to-screen 9)))
(global-set-key (kbd "C-u 0") (lambda () (interactive) (switch-to-screen 0)))
